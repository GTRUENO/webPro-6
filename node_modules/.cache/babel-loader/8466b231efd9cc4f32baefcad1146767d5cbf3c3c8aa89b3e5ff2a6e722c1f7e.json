{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adgos\\\\Desktop\\\\\\uC6F9\\uC751\\uD504\\uD300\\uD50C\\\\src\\\\page\\\\P57\\\\components\\\\DayWeather.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DayWeather = () => {\n  _s();\n  const today = new Date();\n  const week = ['일', '월', '화', '수', '목', '금', '토'];\n  const formattedDate = `${today.getFullYear()}년 ${today.getMonth() + 1}월 ${today.getDate()}일 ${week[today.getDay()]}요일`;\n  const [weather, setWeather] = useState(null);\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      getWeatherByCurrentLocation(lat, lon);\n    });\n  };\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=c80e0084d2561acf60206541abf57eb2`;\n    let response = await fetch(url);\n    let data = await response.json();\n    setWeather(data);\n    console.log(data);\n  };\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [formattedDate, \" \\uB0A0\\uC528\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `http://openweathermap.org/img/wn/${weather === null || weather === void 0 ? void 0 : weather.weather[0].icon}@2x.png`,\n      alt: \"weather icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(DayWeather, \"zh6OemVMK1sGCMM7fACoVGDcjjs=\");\n_c = DayWeather;\nexport default DayWeather;\nvar _c;\n$RefreshReg$(_c, \"DayWeather\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","DayWeather","_s","today","Date","week","formattedDate","getFullYear","getMonth","getDate","getDay","weather","setWeather","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","getWeatherByCurrentLocation","url","response","fetch","data","json","console","log","style","display","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","_c","$RefreshReg$"],"sources":["C:/Users/adgos/Desktop/웹응프팀플/src/page/P57/components/DayWeather.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nconst DayWeather = () => {\r\n  const today = new Date()\r\n  const week = ['일', '월', '화', '수', '목', '금', '토']\r\n  const formattedDate = `${today.getFullYear()}년 ${today.getMonth() + 1}월 ${today.getDate()}일 ${week[today.getDay()]}요일`\r\n  const [weather, setWeather] = useState(null)\r\n\r\n  const getCurrentLocation = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      let lat = position.coords.latitude\r\n      let lon = position.coords.longitude\r\n      getWeatherByCurrentLocation(lat, lon)\r\n    })\r\n  }\r\n\r\n  const getWeatherByCurrentLocation = async (lat, lon) => {\r\n    let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=c80e0084d2561acf60206541abf57eb2`\r\n    let response = await fetch(url)\r\n    let data = await response.json()\r\n    setWeather(data)\r\n    console.log(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCurrentLocation()\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n      <h1>{formattedDate} 날씨</h1>\r\n      <img src={`http://openweathermap.org/img/wn/${weather?.weather[0].icon}@2x.png`} alt=\"weather icon\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayWeather"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAChD,MAAMC,aAAa,GAAG,GAAGH,KAAK,CAACI,WAAW,CAAC,CAAC,KAAKJ,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAKL,KAAK,CAACM,OAAO,CAAC,CAAC,KAAKJ,IAAI,CAACF,KAAK,CAACO,MAAM,CAAC,CAAC,CAAC,IAAI;EACtH,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMe,kBAAkB,GAAGA,CAAA,KAAM;IAC/BC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;MACrD,IAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;MAClC,IAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;MACnCC,2BAA2B,CAACL,GAAG,EAAEG,GAAG,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,2BAA2B,GAAG,MAAAA,CAAOL,GAAG,EAAEG,GAAG,KAAK;IACtD,IAAIG,GAAG,GAAG,uDAAuDN,GAAG,QAAQG,GAAG,yCAAyC;IACxH,IAAII,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IAC/B,IAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAChChB,UAAU,CAACe,IAAI,CAAC;IAChBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACnB,CAAC;EAED9B,SAAS,CAAC,MAAM;IACdgB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA;IAAK+B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAC,QAAA,gBACpDlC,OAAA;MAAAkC,QAAA,GAAK5B,aAAa,EAAC,eAAG;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BtC,OAAA;MAAKuC,GAAG,EAAE,oCAAoC5B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEA,OAAO,CAAC,CAAC,CAAC,CAAC6B,IAAI,SAAU;MAACC,GAAG,EAAC;IAAc;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnG,CAAC;AAEV,CAAC;AAAApC,EAAA,CAhCKD,UAAU;AAAAyC,EAAA,GAAVzC,UAAU;AAkChB,eAAeA,UAAU;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}